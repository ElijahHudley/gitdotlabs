{"version":3,"sources":["assets/images/GitHub_Logo_White.png","Search/Search.jsx","Search/Results/SearchResults.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","setResults","data","setTimeout","setState","results","items","totalCount","total_count","fetching","fetchUsersByValue","page","state","searchValue","amountPerPage","length","undefined","cache","a","url","fetch","then","json","submitInput","ev","preventDefault","onInputChange","target","value","inputValue","React","createRef","this","className","onSubmit","onChange","placeholder","ref","setCurrentPage","pageCount","Math","ceil","Component","SearchResults","onPageClick","selected","constructResults","map","item","index","key","alt","src","avatar_url","login","score","type","href","html_url","rel","s","constructedList","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f77ba4b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GitHub_Logo_White.064ace47.png\";","import React from 'react';\nimport { SearchResults } from './';\nimport './style.css';\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputValue = React.createRef();\n        this.state = { searchValue: '' };\n        this.cache = {};\n\n        this.state = {\n            results: [],\n            totalCount: 0,\n            amountPerPage: 50,\n            fetching: false,\n        };\n    }\n\n    setResults = (data) => {\n        setTimeout( () => {\n            this.setState({\n                results: data.items,\n                totalCount: data.total_count > 1000 ? 1000 :  data.total_count,\n                fetching: false\n            });\n        }, 2500);\n    }\n\n    fetchUsersByValue = (page) => {\n        const { searchValue, amountPerPage } = this.state;\n        if(this.state.searchValue.length < 3) return;\n\n        if(this.cache[page] !== undefined) {\n            this.setResults(this.cache[page]);\n            return;\n        } \n\n        this.setState({ fetching: true }, async () => {\n            const url = `https://api.github.com/search/users?q=${searchValue}&sort=desc&per_page=${amountPerPage}&page=${page}`;\n\n            const data = await fetch(url).then((data) => {\n                return data.json();\n            });\n\n            this.cache[page] = data;\n            this.setResults(data);\n        })\n    }\n\n    submitInput = async (ev) => {\n        ev.preventDefault();\n        if(this.state.searchValue.length < 3) return;\n        this.cache = {};\n        this.fetchUsersByValue(1);\n    }\n\n    onInputChange = async (ev) => {\n        ev.preventDefault();\n        this.setState({ searchValue: ev.target.value });\n    }\n\n    render() {\n        const { totalCount, amountPerPage, results, fetching } = this.state;\n\n        return (\n            <div className={'container'}>\n                <div className={fetching ? 'container-loader':'container-loader-off'}>\n                    <span className={'container-loader-content'}>Getting Data</span>\n                </div>\n                \n                <div className={'search-container'}>\n                    <h2>Search for Users</h2>\n\n                    <form onSubmit={this.submitInput} className={'search-form'}>\n                        <input onChange={this.onInputChange} placeholder={'Please enter username'} className={'search-form-input'} ref={this.inputValue} />\n                        <button className='search-form-button'> Search </button>\n                    </form>\n                </div>\n\n                <div className={'search-result-container-count'}>\n                    <span className={'search-result-count'}>\n                        {`Displaying ${this.state.totalCount} Users Found`}\n                    </span>\n                </div>\n\n                <SearchResults\n                    setCurrentPage={this.fetchUsersByValue}\n                    pageCount={Math.ceil(totalCount / amountPerPage)}\n                    results={results}\n                    amountPerPage={amountPerPage}\n                 />\n            </div>   \n        );\n    }\n}\n\nexport default Search;","import React from 'react';\nimport ReactPaginate from 'react-paginate';\n\nimport './style.css';\n\nclass SearchResults extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const {\n            setCurrentPage = 0,\n            pageCount = 0,\n            results = [],\n            amountPerPage = 0,s\n        } = props;\n    }\n\n    onPageClick = data => {\n        const { setCurrentPage, amountPerPage } = this.props;\n        let selected = data.selected + 1;\n        this.props.setCurrentPage(selected);\n    };\n\n    constructResults = () => {\n        const { results, amountPerPage } = this.props;\n        if(results === undefined || results.length === 0) return;\n\n        return results.map((item, index) => {\n            return (\n                <li key={`search-result-${index}`} className={'results-list-item'}>\n                    <img alt={'user avatar'} className={'results-list-item-image'} src={item.avatar_url} />\n                    <span className={'results-list-item-content'}> {`Username: ${item.login}`} </span>\n                    <span className={'results-list-item-content'}> {`Score: ${item.score}`} </span>\n                    <span className={'results-list-item-content'}> {`Type: ${item.type}`} </span>\n\n                    <a className={'results-list-item-content'} href={`${item.html_url}`} rel=\"noopener noreferrer\" target={'_blank'}>{'PROFILE'}</a>\n                    <a className={'results-list-item-content'} href={`https://api.github.com/users/${item.login}`} rel=\"noopener noreferrer\" target={'_blank'}>{'API PROFILE'}</a>\n                </li>\n            )\n        })\n    }\n\n    render() {\n        const constructedList = this.constructResults() || null;\n       \n        return ( \n            <div>\n                <ul className={'results-list'} >\n                    { constructedList }   \n                </ul>\n\n                <ReactPaginate\n                    previousLabel={'previous'}\n                    nextLabel={'next'}\n                    breakLabel={'...'}\n                    breakClassName={'pagination-break'}\n                    pageCount={this.props.pageCount}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    onPageChange={this.onPageClick}\n                    containerClassName={'pagination'}\n                    activeClassName={'pagination-active'}\n            />\n        </div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport logo from './assets/images/GitHub_Logo_White.png';\n\nimport { Search } from './Search/';\nimport './App.css';\n\nfunction App() {\n\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}